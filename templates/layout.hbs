<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="utf-8" />
  <title>{{#if word}}Définition de "{{{ word }}}" - {{/if}}Simple TLFi</title>
  <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0" />
  <meta name="author" content="Benjamin Becquet" />
  <link rel="stylesheet" href="/styles/main.css">
</head>

<body class="{{#unless word}}home{{/unless}}">
  <div id="top" class="page">
    <header>
      <a href="/def">
        <h1 class="pageTitle">
          <span class="icon">{{{inlineSVG "imgs/icon-book.svg"}}}</span>
          <span class="text">Simple TLFi</span>
        </h1>
      </a>
      <div id="controls">
        <form class="searchForm" action="/def" method="get">
          <div class="wordInputWrapper">
            <input id="wordInput" type="text" name="word" aria-label="Chercher un mot" {{#if word}}value="{{{word}}}"
              {{else}}autofocus{{/if}} />
            <button id="wordInputSubmit" type="submit" aria-label="Chercher">
              <img src=" ../imgs/icon-mag-glass.svg" alt="" />
            </button>
          </div>
        </form>
        <button id="settingsToggle" aria-hidden="true"
          title="Préférences d'affichage">{{{inlineSVG "imgs/icon-settings.svg"}}}</button>
      </div>
    </header>
    <div id="settings" class="hidden">
      <div class="setting">
        <div class="setting-title">Thème</div>
        <label>
          <input type="radio" name="theme" value="auto" checked>
          <span class="setting-label">Auto</span>
        </label>
        <label>
          <input type="radio" name="theme" value="light">
          <span class="setting-label">Clair</span>
        </label>
        <label>
          <input type="radio" name="theme" value="dark">
          <span class="setting-label">Sombre</span>
        </label>
      </div>
      <div class="setting">
        <div class="setting-title">Police</div>
        <label>
          <input type="radio" name="font" value="serif" checked>
          <span class="setting-label">Serif</span>
        </label>
        <label>
          <input type="radio" name="font" value="sans-serif">
          <span class="setting-label">Sans-serif</span>
          </span>
        </label>
      </div>
      <div class="setting">
        <div class="setting-title">Alignement</div>
        <label>
          <input type="radio" name="align" value="left" checked>
          <span class="setting-label">Gauche</span>
        </label>
        <label>
          <input type="radio" name="align" value="justify">
          <span class="setting-label">Justifié</span>
        </label>
      </div>
    </div>
    <main>
      {{{ body }}}
    </main>
    <footer>
      <p>Ce site est une présentation alternative du <a class="external"
          href="https://fr.wikipedia.org/wiki/Tr%C3%A9sor_de_la_langue_fran%C3%A7aise_informatis%C3%A9">TLFi</a>
        tel que proposé par le <a class="external" href="https://www.cnrtl.fr/definition/">portail
          lexicographique</a> du
        <abbr title="Centre National de Ressources Textuelles et Linguistiques">CNRTL</abbr>. C'est un projet personnel
        qui n'est affilié à aucune de ces entités.</p>
      <p>Auteur : <a href="https://bbecquet.net/">Benjamin Becquet</a> - <a
          href="mailto:benjamin@bbecquet.net?subject=Simple CNRTL">Me contacter.</a></p>
    </footer>
  </div>
  <script>
    function restoreSavedSettings() {
      Object.keys(localStorage)
        .filter(key => key.startsWith('setting-'))
        .map(key => ({
          name: key.substring(8),
          value: localStorage.getItem(key),
        }))
        .forEach(({ name, value }) => {
          const selectedOption = document.querySelector(`#settings input[type=radio][name=${name}][value=${value}]`);
          if (!selectedOption) { return; }
          selectedOption.checked = true;
        });

      document.querySelectorAll(`#settings input[type=radio]:checked`)
        .forEach(option => { option.dispatchEvent(new Event('change')); })
    }

    function saveSetting({ name, value }) {
      const storageName = `setting-${name}`;
      localStorage.setItem(storageName, value);
    }

    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

    window.addEventListener('load', () => {
      const root = document.documentElement;

      const autoDarkModeHandler = () => {
        const darkModeOn = darkModeMediaQuery.matches;
        root.dataset.theme = darkModeOn ? 'dark' : 'light';
      };

      document.querySelectorAll('#settings input[type=radio]')
        .forEach(radio => {
          radio.addEventListener('change', e => {
            const { name, value } = e.target;
            switch (name) {
              case 'font':
                root.style.setProperty('--setting-font', `var(--${value})`);
                break;
              case 'align':
                root.style.setProperty('--setting-align', value);
                break;
              case 'theme':
                if (value === 'auto') {
                  autoDarkModeHandler();
                  darkModeMediaQuery.addListener(autoDarkModeHandler);
                } else {
                  darkModeMediaQuery.removeListener(autoDarkModeHandler);
                  root.dataset.theme = value;
                }
                break;
            }
            saveSetting({ name, value });
          })
        });

      restoreSavedSettings();

      document.getElementById('settingsToggle').addEventListener('click', function (e) {
        document.getElementById('settingsToggle').classList.toggle('pressed');
        document.getElementById('settings').classList.toggle('hidden');
      });
    });
  </script>
</body>

</html>